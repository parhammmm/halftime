// Generated by CoffeeScript 1.6.3
(function() {
  var DialogViewModel, Extension, HighlineProvider, PhoenixT1DialogView, PhoenixT1Provider, Provider, View, supportedLangs, _ref, _ref1, _ref2,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  supportedLangs = ['en', 'es', 'pt'];

  this.messages = {
    lang: function() {
      var lang;
      lang = $('html').attr('lang');
      if (__indexOf.call(supportedLangs, lang) < 0) {
        return 'en';
      }
      return lang;
    },
    get: function(key) {
      var _ref;
      return (_ref = this[this.lang()][key]) != null ? _ref : '#' + key + '#';
    }
  };

  this.messages.en = {
    enable: 'Show Football',
    disable: 'Hide Football'
  };

  this.messages.es = {
    filter_dialog_title: 'Filtros',
    enable: 'Activar',
    disable: 'Desactivar',
    excluding: 'Excluyendo',
    including: 'Incluyendo',
    tweets_terms: 'tweets con términos',
    tweets_users: 'tweets de usuarios',
    filter_terms_list_title: 'Términos separados por comas.<br/>Por ej.: twitcam, jijiji',
    filter_users_list_title: 'Usuarios separados por comas.<br/>Por ej.: tuiterowsky, robocopano',
    show_report_view: 'Mostrar resumen de tweets filtrados.',
    bookmarklet_text: 'Configuración de OpenTweetFilter',
    bookmarklet_title: 'Arrastra este elemento a la barra de marcadores para respaldar tus filtros',
    filtering_by_start: 'Ocultando',
    filtering_by_end: 'tweets por filtro de',
    filtering_by_end_singular: 'tweet por filtro de',
    users_with_hidden_tweets: 'Usuarios con tweets ocultos',
    terms: 'términos',
    people: 'usuarios',
    and: 'y',
    clear: 'Limpiar',
    filter: 'Filtros',
    welcome_tip: 'Pssst... Aquí puedes configurar<br/>la extensión Open Tweet Filter. →'
  };

  this.messages.pt = {
    filter_dialog_title: 'Filtros',
    enable: 'Ativar',
    disable: 'Desativar',
    excluding: 'Excluindo',
    including: 'Incluindo',
    tweets_terms: 'tweets com termos',
    tweets_users: 'tweets de usuarios',
    filter_terms_list_title: 'Termos separados por vírgulas.<br/>Por ex.: twitcam, #BBB',
    filter_users_list_title: 'Usuarios separados por vírgulas.<br/>Por ej.: tuiterowsky, robocopano',
    show_report_view: 'Mostrar resumo de tweets filtrados.',
    bookmarklet_text: 'Configuração do OpenTweetFilter',
    bookmarklet_title: 'Arraste esse bookmarklet para a barra de bookmarks para que você possa fazer um backup de seus filtros',
    filtering_by_start: 'Ocultando',
    filtering_by_end: 'tweets por filtro de',
    filtering_by_end_singular: 'tweet por filtro de',
    users_with_hidden_tweets: 'Usuarios com tweets ocultos',
    terms: 'termos',
    people: 'usuarios',
    and: 'e',
    clear: 'Limpar',
    filter: 'Filtros',
    welcome_tip: 'Pssst... Aquí você pode configurar<br/>a extensão Open Tweet Filter. →'
  };

  DialogViewModel = (function() {
    DialogViewModel.prototype.settings = {
      termsList: '',
      usersList: '',
      enabled: true
    };

    function DialogViewModel() {
      var x,
        _this = this;
      this.enabled = ko.observable(true);
      this.enabledText = ko.computed(function() {
        if (_this.enabled()) {
          return messages.get('enable');
        } else {
          return messages.get('disable');
        }
      });
      x = this;
      $.ajax({
        url: 'https://s3-us-west-2.amazonaws.com/parha.me/football.json',
        dataType: 'json',
        async: false,
        success: function(data) {
          x.termsList = ko.observable(data['terms']);
          return x.usersList = ko.observable(data['users']);
        }
      });
    }

    DialogViewModel.prototype.onSettingsChange = function(callback) {
      var setting, _results;
      _results = [];
      for (setting in this.settings) {
        _results.push(this[setting].subscribe(callback));
      }
      return _results;
    };

    DialogViewModel.prototype.toggle = function(attr) {
      return this[attr](!this[attr]());
    };

    DialogViewModel.prototype.toggleEnabled = function() {
      return this.toggle('enabled');
    };

    return DialogViewModel;

  })();

  View = (function() {
    function View() {}

    View.prototype.render = function(viewModel) {
      throw new Error('Not implemented');
    };

    return View;

  })();

  PhoenixT1DialogView = (function(_super) {
    __extends(PhoenixT1DialogView, _super);

    function PhoenixT1DialogView() {
      _ref = PhoenixT1DialogView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PhoenixT1DialogView.prototype.render = function(viewModel) {
      return this.renderButton(viewModel);
    };

    PhoenixT1DialogView.prototype.renderButton = function(viewModel) {
      var buttonTemplate;
      buttonTemplate = function() {
        return li('#filter-button', {
          'data-name': 'filter'
        }, function() {
          return a('.js-filter-dialog', {
            href: '#',
            'data-bind': 'click: toggleEnabled, text: enabledText'
          });
        });
      };
      $('#user-dropdown ul li:nth-child(5)').after(CoffeeKup.render(buttonTemplate, {
        hardcode: {
          label: viewModel.enabledText()
        }
      }));
      return ko.applyBindings(viewModel, $('#filter-button')[0]);
    };

    return PhoenixT1DialogView;

  })(View);

  Provider = (function() {
    function Provider() {}

    Provider.prototype.inMyProfilePage = function() {
      return this.screenUser() === this.sessionUser();
    };

    Provider.prototype.normalizeUser = function(x) {
      if (x != null) {
        return x.replace('@', '').trim();
      } else {
        return '';
      }
    };

    Provider.getActive = function() {
      var p, providers, _i, _len, _ref1;
      providers = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _ref1 = providers.map(function(x) {
        return new x;
      });
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        p = _ref1[_i];
        if (p.isActive()) {
          return p;
        }
      }
    };

    return Provider;

  })();

  PhoenixT1Provider = (function(_super) {
    __extends(PhoenixT1Provider, _super);

    function PhoenixT1Provider() {
      _ref1 = PhoenixT1Provider.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    PhoenixT1Provider.prototype.dialogView = new PhoenixT1DialogView;

    PhoenixT1Provider.prototype.isActive = function() {
      return $('body').hasClass('t1');
    };

    PhoenixT1Provider.prototype.filterCurrentPage = function() {
      var isIgnorablePage, _ref2;
      isIgnorablePage = (_ref2 = location.pathname + location.hash, __indexOf.call(this.ignorablePages(), _ref2) >= 0);
      return !(this.inMyProfilePage() || isIgnorablePage);
    };

    PhoenixT1Provider.prototype.ignorablePages = function() {
      return ['/' + this.sessionUser() + '/lists', '/i/#!/who_to_follow/suggestions', '/i/#!/who_to_follow/import', '/i/#!/who_to_follow/interests'];
    };

    PhoenixT1Provider.prototype.sessionUser = function() {
      return this.normalizeUser($('.account-group.js-mini-current-user').data('screen-name'));
    };

    PhoenixT1Provider.prototype.screenUser = function() {
      return this.normalizeUser($('.screen-name:not(.hidden)').text());
    };

    PhoenixT1Provider.prototype.tweets = function() {
      return $('div.tweet.js-stream-tweet');
    };

    PhoenixT1Provider.prototype.tweetText = function(el) {
      return $(el).find('.js-tweet-text, .tweet-text, .entry-content, .twtr-tweet-text').text();
    };

    PhoenixT1Provider.prototype.tweetAuthor = function(el) {
      return this.normalizeUser($(el).find('.username').text());
    };

    PhoenixT1Provider.prototype.tweetAuthorPhoto = function(el) {
      return $(el).find('img.avatar').attr('src');
    };

    PhoenixT1Provider.prototype.tweetRetweeter = function(el) {
      var href;
      href = $(el).find('.pretty-link.js-user-profile-link').attr('href');
      if (href) {
        return href.replace('/#!/', '');
      } else {
        return '';
      }
    };

    PhoenixT1Provider.prototype.onNewTweets = function(callback) {
      var _this = this;
      return $(document).on('DOMNodeInserted', '.stream .stream-items', function() {
        var tweetsCount;
        tweetsCount = _this.tweets().size();
        if (_this.tweetsCount !== tweetsCount) {
          _this.tweetsCount = tweetsCount;
          return callback();
        }
      });
    };

    return PhoenixT1Provider;

  })(Provider);

  HighlineProvider = (function(_super) {
    __extends(HighlineProvider, _super);

    function HighlineProvider() {
      _ref2 = HighlineProvider.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    HighlineProvider.prototype.dialogView = new PhoenixT1DialogView;

    HighlineProvider.prototype.isActive = function() {
      return $('body').hasClass('highline');
    };

    HighlineProvider.prototype.filterCurrentPage = function() {
      var isIgnorablePage, _ref3;
      isIgnorablePage = (_ref3 = location.pathname + location.hash, __indexOf.call(this.ignorablePages(), _ref3) >= 0);
      return !(this.inMyProfilePage() || isIgnorablePage);
    };

    HighlineProvider.prototype.ignorablePages = function() {
      return ['/' + this.sessionUser() + '/lists', '/i/#!/who_to_follow/suggestions', '/i/#!/who_to_follow/import', '/i/#!/who_to_follow/interests'];
    };

    HighlineProvider.prototype.sessionUser = function() {
      return this.normalizeUser($('.account-group.js-mini-current-user').data('screen-name'));
    };

    HighlineProvider.prototype.screenUser = function() {
      return this.normalizeUser($('.ProfileHeaderCard-screenname').text());
    };

    HighlineProvider.prototype.tweets = function() {
      return $('div.tweet.js-stream-tweet, .Grid[data-component-term="tweet"]');
    };

    HighlineProvider.prototype.tweetText = function(el) {
      return $(el).find('.js-tweet-text, .entry-content, .ProfileTweet-text').text();
    };

    HighlineProvider.prototype.tweetAuthor = function(el) {
      return this.normalizeUser($(el).find('.username').text());
    };

    HighlineProvider.prototype.tweetAuthorPhoto = function(el) {
      return $(el).find('img.js-action-profile-avatar').attr('src');
    };

    HighlineProvider.prototype.tweetRetweeter = function(el) {
      var href;
      href = $(el).find('.pretty-link.js-user-profile-link').attr('href');
      if (href) {
        return href.replace('/#!/', '');
      } else {
        return '';
      }
    };

    HighlineProvider.prototype.onNewTweets = function(callback) {
      var _this = this;
      return $(document).on('DOMNodeInserted', '.stream .stream-items', function() {
        var tweetsCount;
        tweetsCount = _this.tweets().size();
        if (_this.tweetsCount !== tweetsCount) {
          _this.tweetsCount = tweetsCount;
          return callback();
        }
      });
    };

    return HighlineProvider;

  })(Provider);

  Extension = (function() {
    Extension.prototype.provider = Provider.getActive(PhoenixT1Provider, HighlineProvider);

    function Extension() {
      var _this = this;
      this.dialogViewModel = new DialogViewModel;
      this.provider.dialogView.render(this.dialogViewModel);
      $(window).on('hashchange', function() {
        return setTimeout((function() {
          return _this.applyFilter();
        }), 500);
      });
      this.provider.onNewTweets(function() {
        return _this.applyFilter();
      });
      this.dialogViewModel.onSettingsChange(function() {
        return _this.applyFilter();
      });
      this.applyFilter();
    }

    Extension.prototype.applyFilter = function() {
      var _this = this;
      return this.throttle(10, function() {
        var apply, hiddenCount, hiddenUsers, termsRegExp, usersRegExp;
        apply = _this.dialogViewModel.enabled() && _this.provider.filterCurrentPage();
        if (apply) {
          termsRegExp = _this.filterRegExp(_this.filterPattern(_this.dialogViewModel.termsList(), false));
          usersRegExp = _this.filterRegExp(_this.filterPattern(_this.dialogViewModel.usersList(), true));
        }
        hiddenCount = 0;
        hiddenUsers = {};
        return _this.provider.tweets().each(function(i, el) {
          var foundTermsMatches, foundUserMatches, termsMatch, tweetAuthor, usersMatch;
          termsMatch = false;
          usersMatch = false;
          if (apply) {
            tweetAuthor = _this.provider.tweetAuthor(el);
            if (termsRegExp != null) {
              termsRegExp.lastIndex = 0;
              foundTermsMatches = termsRegExp.test(_this.provider.tweetText(el));
              termsMatch = foundTermsMatches;
            }
            if (usersRegExp != null) {
              usersRegExp.lastIndex = 0;
              foundUserMatches = usersRegExp.test(tweetAuthor);
              if (!foundUserMatches) {
                usersRegExp.lastIndex = 0;
                foundUserMatches = usersRegExp.test(_this.provider.tweetRetweeter(el));
              }
              usersMatch = foundUserMatches;
            }
          }
          if (termsMatch || usersMatch) {
            el.style.display = 'none';
            hiddenCount++;
            if (!(tweetAuthor in hiddenUsers)) {
              return hiddenUsers[tweetAuthor] = _this.provider.tweetAuthorPhoto(el);
            }
          } else {
            return el.style.display = 'block';
          }
        });
      });
    };

    Extension.prototype.throttle = (function() {
      var timeout;
      timeout = {};
      return function(delay, fn) {
        var key;
        key = fn.toString();
        clearTimeout(timeout[key]);
        return timeout[key] = setTimeout(fn, delay);
      };
    })();

    Extension.prototype.filterPattern = function(csv, whole) {
      var values;
      values = csv.split(',');
      values = $.map(values, function(v, i) {
        v = $.trim(v);
        if (v.length > 2 && v[0] === '/' && v[v.length - 1] === '/') {
          return v.substr(1, v.length - 2);
        } else {
          return v.replace(/([\.\(\)\[\]\{\}\+\*\?\\])/g, '\\$1');
        }
      });
      values = $.grep(values, function(v, i) {
        return v !== '';
      });
      if (values.length === 0) {
        return null;
      }
      values = '(' + values.join('|') + ')';
      if (whole) {
        return "^" + values + "$";
      } else {
        return values;
      }
    };

    Extension.prototype.filterRegExp = function(pattern) {
      var e;
      if (pattern == null) {
        return null;
      }
      try {
        return new RegExp(pattern, 'gi');
      } catch (_error) {
        e = _error;
        return null;
      }
    };

    return Extension;

  })();

  new Extension();

}).call(this);
